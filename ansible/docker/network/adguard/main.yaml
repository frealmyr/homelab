- hosts: homelab
  become: true
  vars:
    service_name: adguard
    domain: fmlab.no
  tasks:

#############
## Traefik ##
#############

    - name: "{{ service_name }} - create dynamic traefik file"
      copy:
        dest: "/var/lib/homelab/configs/traefik/dynamic/{{ service_name }}.yaml"
        force: true
        owner: "traefik"
        group: "traefik"
        mode: 0700
        content: |
          http:
            routers:
              {{ service_name }}:
                entryPoints:
                  - https
                rule: Host(`{{ service_name }}.fmlab.no`)
                tls:
                  certResolver: letsEncrypt
                service: {{ service_name }}
                middlewares:
                  - security@file
            services:
              {{ service_name }}:
                loadBalancer:
                  servers:
                    - url: http://192.168.0.20:3000

####################
## Docker Volumes ##
####################

    - name: "{{ service_name }} - create docker volumes"
      community.docker.docker_volume:
        volume_name: "{{ service_name }}_{{ item }}"
      loop:
        - conf
        - work

    - name: "{{ service_name }} - create backup sub-directory"
      file:
        path: "/var/lib/homelab/backups/{{ service_name }}"
        state: directory
        owner: backup
        group: backup
        mode: "0770"

    - name: "{{ service_name }} - create weekly dump-volume-to-backup-folder job"
      ansible.builtin.cron:
        name: "docker-volume-backup-{{ item.volume }}"
        minute: "5"
        hour: "3" # 03:05
        weekday: "0" # Sunday
        job: "/var/lib/homelab/scripts/backup-docker-volume.sh {{ item.container }} {{ service_name }} {{ item.volume }}"
      with_items:
        - { container: "{{ service_name }}", volume: "{{ service_name }}_conf" }

#######################
## Docker Containers ##
#######################

    - name: "{{ service_name }} - pull latest image"
      community.docker.docker_image:
        name: adguard/adguardhome:latest
        source: pull

    - name: "{{ service_name }} - remove containers"
      community.docker.docker_container:
        name: "{{ service_name }}"
        state: absent

    - name: "{{ service_name }} - start docker proxy container"
      community.docker.docker_container:
        name: "{{ service_name }}"
        image: adguard/adguardhome:latest
        volumes:
          - "{{ service_name }}_conf:/opt/adguardhome/conf"
          - "{{ service_name }}_work:/opt/adguardhome/work"
        network_mode: host
        restart_policy: unless-stopped
