- hosts: homelab
  become: true
  vars:
    service_name: jellyfin
    domain: fmlab.no
  tasks:

###########
## Users ##
###########

    - name: "{{ service_name }} - create group"
      ansible.builtin.group:
        name: entertainment
        state: present
      register: group

    - name: "{{ service_name }} - create non-root user"
      user:
        name: "{{ service_name }}"
        create_home: false
        shell: /usr/sbin/nologin
        state: present
      register: user

###################
## Data & Backup ##
###################

    - name: "{{ service_name }} - create docker volumes"
      community.docker.docker_volume:
        volume_name: "{{ service_name }}_{{ item }}"
        state: present
      loop:
        - config
        - cache

    - name: "{{ service_name }} - create backup sub-directory"
      file:
        path: "/var/lib/homelab/backups/{{ service_name }}"
        state: directory
        owner: "{{ user.uid }}"
        group: "{{ user.group }}"
        mode: "0770"

    - name: "{{ service_name }} - create weekly dump-volume-to-backup-folder job"
      ansible.builtin.cron:
        name: "docker-volume-backup-{{ item.volume }}"
        minute: "5"
        hour: "3" # 03:05
        weekday: "0" # Sunday
        job: "/var/lib/homelab/scripts/backup-docker-volume.sh {{ item.container }} {{ service_name }} {{ item.volume }}"
      with_items:
        - { container: "{{ service_name }}", volume: "{{ service_name }}_config" }

###################
## Reverse Proxy ##
###################

    - name: "{{ service_name }} - create dynamic traefik file"
      copy:
        dest: "/var/lib/homelab/configs/traefik/dynamic/{{ service_name }}.yaml"
        force: true
        owner: "traefik"
        group: "traefik"
        mode: 0700
        content: |
          http:
            routers:
              {{ service_name }}:
                entryPoints:
                  - https
                rule: Host(`{{ service_name }}.{{ domain }}`)
                tls:
                  certResolver: letsEncrypt
                service: {{ service_name }}
                middlewares:
                  - security@file
            services:
              {{ service_name }}:
                loadBalancer:
                  servers:
                    - url: http://192.168.0.20:8096

#############
## Helpers ##
#############

    - name: helper - get group_id - video
      getent:
        database: group
        key: video
      register: group_video

    - name: helper - get group_id - render
      getent:
        database: group
        key: render
      register: group_render

#######################
## Docker Containers ##
#######################

    - name: "{{ service_name }} - remove containers"
      community.docker.docker_container:
        name: "{{ service_name }}"
        state: absent

    - name: "{{ service_name }} - start docker proxy container"
      community.docker.docker_container:
        name: "{{ service_name }}"
        image: jellyfin/jellyfin:latest
        user: "{{ user.uid }}:{{ group.gid }}"
        groups:
          - '{{ group_video.ansible_facts.getent_group.video[1] }}'
          - '{{ group_render.ansible_facts.getent_group.render[1] }}'
        volumes:
          - "{{ service_name }}_cache:/cache"
          - "{{ service_name }}_config:/config"
          - /media/storage/entertainment:/media/storage/entertainment:ro
        devices:
          - /dev/dri/card0:/dev/dri/card0
          - /dev/dri/renderD128:/dev/dri/renderD128
        network_mode: host
        security_opts:
          - no-new-privileges:true
        restart_policy: unless-stopped
