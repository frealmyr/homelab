---
- hosts: k8s_master
  become: true

  vars:
    net_subnet: 10.244.0.0/16
    sysctl_config:
      net.ipv4.ip_forward: 1
      net.ipv4.conf.all.forwarding: 1
      net.ipv6.conf.all.forwarding: 1
      net.bridge.bridge-nf-call-iptables: 1
      net.bridge.bridge-nf-call-ip6tables: 1
      fs.inotify.max_user_watches: 524288
      fs.inotify.max_user_instances: 512

  tasks:
#    ##############
#    ## Hostname ##
#    ##############
#
#    - name: hostname - change if mismatch from inventory name
#      hostname: name="{{ inventory_hostname }}"
#      when: ansible_fqdn != ansible_ssh_host
#
#    - name: system - rebooting host to refresh hostname
#      reboot:
#      when: ansible_fqdn != ansible_ssh_host
#
#    - name: hostname - fix /etc/hosts
#      lineinfile:
#        dest: /etc/hosts
#        regexp: '^127\.0\.1\.1'
#        line: "127.0.1.1    {{ ansible_hostname }}"
#        state: present
#      when: ansible_fqdn != ansible_ssh_host
#
#    - name: hostname - validate ansible_fqdn == inventory_hostname
#      tags:
#        - validate
#      assert:
#        that: ansible_fqdn == inventory_hostname
#
#    ##################
#    ## APT Packages ##
#    ##################
#
#    - name: apt - update & upgrade packages
#      apt:
#        upgrade: full
#        update_cache: yes
#        cache_valid_time: 3600
#
#    - name: apt - download gpg key
#      get_url:
#        url: "{{ item.url }}"
#        dest: "/etc/apt/trusted.gpg.d/{{ item.filename }}"
#      with_items:
#        - url: https://download.docker.com/linux/debian/gpg
#          filename: docker.asc
#
#    - name: apt - add signing keys
#      apt_key:
#        url: "{{ item }}"
#        state: present
#      with_items:
#        - https://packages.cloud.google.com/apt/doc/apt-key.gpg
#
#    - name: apt - add repository
#      apt_repository:
#        repo: "{{ item.repo }}"
#        state: present
#        filename: "{{ item.filename }}"
#      with_items:
#        - repo: deb [arch=arm64 signed-by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
#          filename: docker.list
#        - repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
#          filename: kubernetes.list
#
#    - name: apt - install misc packages
#      apt:
#        name: "{{ packages }}"
#        state: present
#        update_cache: yes
#      vars:
#        packages:
#          - curl
#          - htop
#          - inxi
#          - ufw
#
#    - name: apt - install docker packages
#      apt:
#        name: "{{ packages }}"
#        state: present
#      vars:
#        packages:
#          - docker-ce
#          - docker-ce-cli
#          - containerd.io
#          - docker-compose-plugin
#
#    - name: apt - install Kubernetes binaries
#      apt:
#        name: "{{ packages }}"
#        state: present
#      vars:
#        packages:
#          - kubeadm
#          - kubectl
#          - kubelet
#          - kubernetes-cni
#
#    #########
#    ## rPi ##
#    #########
#
#    - name: rpi - enable container related cgroups
#      replace:
#        path: /boot/cmdline.txt
#        regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
#        replace: '\1 {{ item }}'
#      with_items:
#        - "cgroup_enable=cpuset"
#        - "cgroup_memory=1"
#        - "cgroup_enable=memory"
#        - "swapaccount=1"
#
#    ##############
#    ## Firewall ##
#    ##############
#
#    - name: firewall - allow RFC1918 networks to this host
#      community.general.ufw:
#        rule: allow
#        src: "{{ item }}"
#      loop:
#        - "{{ net_subnet }}"
#        - 10.0.0.0/24 # LAN
#
#    - name: firewall - allow ingress ports
#      community.general.ufw:
#        rule: allow
#        port: "{{ item }}"
#        proto: tcp
#      loop:
#        - "22"
#        - "80"
#        - "443"
#
#    - name: firewall - enable ufw
#      community.general.ufw:
#        state: enabled
#        policy: deny
#
#    ##########
#    ## Swap ##
#    ##########
#
#    - name: swap - remove swapfile from /etc/fstab
#      mount:
#        name: "{{ item }}"
#        fstype: swap
#        state: absent
#      with_items:
#        - none
#        - swap
#
#    - name: swap - disable swap service
#      service:
#        name: dphys-swapfile
#        enabled: no
#        masked: yes
#        state: stopped
#
#    - name: swap - disable swap
#      command: swapoff -a
#      when: ansible_swaptotal_mb > 0
#
#    ########################
#    ## Modprobe / Systemd ##
#    ########################
#
#    - name: modprobe - enable modules
#      community.general.modprobe:
#        name: "{{ item }}"
#        state: present
#      with_items:
#        - br_netfilter
#        - overlay
#
#    - name: modprobe - load modules on boot
#      lineinfile:
#        path: /etc/modules
#        line: "{{item}}"
#        state: present
#      with_items:
#        - br_netfilter
#        - overlay
#
#    - name: systemctl - allow ip forwarding
#      sysctl:
#        name: "{{ item.key }}"
#        value: "{{ item.value }}"
#        sysctl_set: yes
#        state: present
#        reload: yes
#        ignoreerrors: no
#      with_dict: "{{ sysctl_config }}"
#
#    # ################
#    # ## Containerd ##
#    # ################
#
#    - name: containerd - create default config
#      shell: containerd config default>/etc/containerd/config.toml
#
#    - name: containerd - enable systemd runc backend
#      replace:
#        path: /etc/containerd/config.toml
#        regexp: "SystemdCgroup = false"
#        replace: "SystemdCgroup = true"
#
#    - name: containerd - restart and enable service
#      service:
#        name: containerd
#        enabled: yes
#        state: restarted
#
#    - name: system - rebooting host
#      reboot:
#
#    #####################
#    ## Destroy cluster ##
#    #####################

    - name: kublet - kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: kubeadm - reset Kubernetes cluster
      command: kubeadm reset -f

    - name: kubeadm - remove cni folder
      file:
        path: /etc/cni/net.d
        state: absent

    ####################
    ## Create cluster ##
    ####################

    - name: modprobe - ensure that modules are enabled
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: kubectl - copy KubeletConfiguration.yaml
      copy:
        dest: /etc/kubernetes/kube-init-config.yaml
        content: "{{ content }}"
      vars:
        content: |
          ---
          apiVersion: kubeadm.k8s.io/v1beta2
          kind: InitConfiguration
          nodeRegistration:
            name: "{{ ansible_hostname }}"
            criSocket: "/run/containerd/containerd.sock"
          localAPIEndpoint:
            advertiseAddress: "{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}"
            bindPort: 6443
          ---
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          cgroupDriver: systemd
          systemReserved:
            cpu: '0.25'
            memory: '500Mi'
          kubeReserved:
            cpu: '0.25'
            memory: '500Mi'
          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          clusterName: "homelab"
          networking:
            podSubnet: "{{ net_subnet }}"
          controlPlaneEndpoint: "{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}:6443"
      when: "'k8s_master' in group_names"

    - name: kubeadm - initialize the Kubernetes cluster
      command: kubeadm init --config /etc/kubernetes/kube-init-config.yaml
      when: "'k8s_master' in group_names"

    - name: ansible - sleep for 45 seconds (wait for cluster startup)
      wait_for:
        timeout: 45

    ################
    ## Kubeconfig ##
    ################

    - name: kubeconfig - copy admin kubeconfig
      command: "{{ item }}"
      with_items:
        - mkdir -p /home/fredrick/.kube
        - cp /etc/kubernetes/admin.conf /home/fredrick/.kube/config
        - chown fredrick:fredrick /home/fredrick/.kube/config
      when: "'k8s_master' in group_names"

    - name: kubeadm - create kubeconfig for terraform
      command: kubeadm kubeconfig user --config /etc/kubernetes/ClusterConfiguration.yaml --client-name terraform --validity-period 8760h
      register: kubeconfig_terraform
      when: "'k8s_master' in group_names"

    - name: kubectl - grant terraform user cluster-admin role
      command: kubectl create clusterrolebinding terraform --clusterrole=cluster-admin --user=terraform
      become_user: fredrick
      when: "'k8s_master' in group_names"

    - name: kubeconfig - create Terraform directory if it does not exist
      file:
        path: ../../terraform/.terraform
        state: directory
      delegate_to: localhost
      become_user: fredrick
      when: "'k8s_master' in group_names"

    - name: kubeconfig - copy kubeconfig to Terraform directory
      copy: content={{ kubeconfig_terraform.stdout }} dest=../../terraform/.terraform/kubeconfig
      delegate_to: localhost
      become_user: fredrick
      when: "'k8s_master' in group_names"

    ###########
    ## Nodes ##
    ###########

    - name: kubectl - remove taints from master node
      command: "kubectl taint nodes {{ ansible_hostname }} {{ item }}"
      become_user: fredrick
      when: "'k8s_master' in group_names"
      with_items:
        - node-role.kubernetes.io/control-plane:NoSchedule-
        #- node-role.kubernetes.io/master:NoSchedule-

    - name: kubectl - add taints to worker nodes
      command: "kubectl taint nodes {{ ansible_hostname }} {{ item }}"
      become_user: fredrick
      when: "'k8s_workers' in group_names"
      with_items:
        - hostname={{ ansible_hostname }}:NoSchedule

    - name: kubeadmin - create kubeadm join token
      command: kubeadm token create --print-join-command
      when: "'k8s_master' in group_names"
      register: k8s_join_token

    - set_fact:
        k8s_join_command: "{{ k8s_join_token.stdout }}"
      when: "'k8s_master' in group_names"

    - name: kubedm - enroll worker nodes to master
      command: "{{ hostvars['node-x300']['k8s_join_command'] }}"
      when: "'k8s_workers' in group_names"

    - name: misc - create persistent volume folder
      file:
        path: /var/lib/k8s/volumes
        state: directory

    # ##################
    # ## Post Install ##
    # ##################

    - name: system - rebooting host
      reboot:
