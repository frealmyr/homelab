---
- hosts: all
  become: true

  vars:
    synology_ip: 10.7.0.11
    sysctl_config:
      net.ipv4.ip_forward: 1
      net.ipv4.conf.all.forwarding: 1
      net.ipv6.conf.all.forwarding: 1
      net.bridge.bridge-nf-call-iptables: 1
      net.bridge.bridge-nf-call-ip6tables: 1
      fs.inotify.max_user_watches: 524288
      fs.inotify.max_user_instances: 512

  tasks:
    ##################
    ## Disks / Swap ##
    ##################

    - name: fstab - remove swapfile from /etc/fstab if it exist
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - none
        - swap

    - name: fstab - add sdd mount options
      replace:
        backup: yes
        path: /etc/fstab
        regexp: '^(\S+)(\s+)(\S+)(\s+)(ext4|xfs|btrfs)(\s+)(((?!{{item}})\S)*)(\s+)(\d)(\s+)(\d)$'
        replace: '\1\2\3\4\5\6\7,{{item}}\9\10\11\12'
      with_items:
        - discard
        - noatime

    #########
    ## UPS ##
    #########

    # Here we piggyback the UPS running on Synology NAS, simply need to allowlist the IPs of clients.
    - name: ups - configure nut to use netclient
      replace:
        path: /etc/nut/nut.conf
        regexp: '^MODE=none'
        replace: 'MODE=netclient'

    - name: ups - configure nut to monitor nas
      lineinfile:
        path: /etc/nut/upsmon.conf
        regexp: '^MONITOR.*'
        line: "MONITOR ups@{{ synology_ip }} 1 monuser secret slave"
        state: present

    - name: ups - restart and enable service
      service:
        name: nut-client
        enabled: yes
        state: restarted

    ########################
    ## Modprobe / Systemd ##
    ########################

    - name: modprobe - enable modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: modprobe - load modules on boot
      lineinfile:
        path: /etc/modules
        line: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: systemctl - allow ip forwarding
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
        ignoreerrors: no
      with_dict: "{{ sysctl_config }}"

    ################
    ## Containerd ##
    ################

    - name: containerd - create default config
      shell: containerd config default>/etc/containerd/config.toml

    - name: containerd - enable systemd runc backend
      replace:
        path: /etc/containerd/config.toml
        regexp: "SystemdCgroup = false"
        replace: "SystemdCgroup = true"

    - name: containerd - restart and enable service
      service:
        name: containerd
        enabled: yes
        state: restarted

    #########
    ## K8s ##
    #########

    - name: k8s - create directory for persistent hostPath "volumes"
      file:
        path: /var/lib/k8s/volumes
        state: directory

    # ############
    # ## Reboot ##
    # ############

    - name: system - reboot (configuration)
      reboot:
