---
- hosts: all
  become: true

  vars:
    synology_ip: 10.7.0.11
    sysctl_config:
      net.ipv4.ip_forward: 1
      net.ipv4.conf.all.forwarding: 1
      net.ipv6.conf.all.forwarding: 1
      net.bridge.bridge-nf-call-iptables: 1
      net.bridge.bridge-nf-call-ip6tables: 1
      fs.inotify.max_user_watches: 524288
      fs.inotify.max_user_instances: 512

  tasks:
    ##################
    ## Raspberry Pi ##
    ##################

    - name: rpi - enable container related cgroups
      replace:
        path: /boot/cmdline.txt
        regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
        replace: '\1 {{ item }}'
      with_items:
        - "cgroup_enable=cpuset"
        - "cgroup_enable=memory"
        - "cgroup_memory=1"
        - "swapaccount=1"

    - name: rpi - set config parameters
      lineinfile:
        path: /boot/config.txt
        regexp: "{{ item.find }}"
        line: "{{ item.value }}"
        state: present
      with_items:
        - find: ^gpu_mem=.*
          value: gpu_mem=16
        - find: ^dtparam=audio=on
          value: "#dtparam=audio=on"
        - find: ^dtoverlay=disable-bt
          value: dtoverlay=disable-bt
        - find: ^dtoverlay=disable-wifi
          value: dtoverlay=disable-wifi

    - name: rpi - disable services
      systemd:
        name: "{{ item }}"
        enabled: no
        masked: yes
        state: stopped
      with_items:
        - apt-daily-upgrade.timer
        - apt-daily.timer
        - hciuart.service
        - man-db.timer
        - raspi-config.service
        - rpi-eeprom-update.service
        - wpa_supplicant.service

    - name: rpi - fstab move logs to RAM
      lineinfile:
        path: /etc/fstab
        regexp: "^tmpfs \/var\/log.*"
        line: "tmpfs /var/log tmpfs defaults,noatime,mode=0755 0 0"
        state: present

    # UNI-T voltmeter shows 1.15A max with USB SSD connected. So around 1A lower than the 2.4A max the PSU provides.
    # The 120mm desktop FAN which is connected to the same power supply should cool this effectivly
    - name: rpi - overclock to 2.0GHz
      lineinfile:
        path: /boot/config.txt
        regexp: "{{ item.find }}"
        line: "{{ item.value }}"
        state: present
      with_items:
        - find: .*over_voltage=.*
          value: over_voltage=6
        - find: .*arm_freq=.*
          value: arm_freq=2000

    #########
    ## UPS ##
    #########

    # Here we piggyback the UPS running on Synology NAS, simply need to allowlist the IPs of clients.
    - name: ups - configure nut to use netclient
      replace:
        path: /etc/nut/nut.conf
        regexp: '^MODE=none'
        replace: 'MODE=netclient'

    - name: ups - configure nut to monitor nas
      lineinfile:
        path: /etc/nut/upsmon.conf
        regexp: '^MONITOR.*'
        line: "MONITOR ups@{{ synology_ip }} 1 monuser secret slave"
        state: present

    - name: ups - restart and enable service
      service:
        name: nut-client
        enabled: yes
        state: restarted

    ########################
    ## Modprobe / Systemd ##
    ########################

    - name: modprobe - enable modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: modprobe - load modules on boot
      lineinfile:
        path: /etc/modules
        line: "{{item}}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: systemctl - allow ip forwarding
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
        ignoreerrors: no
      with_dict: "{{ sysctl_config }}"

    ################
    ## Containerd ##
    ################

    - name: containerd - create default config
      shell: containerd config default>/etc/containerd/config.toml

    - name: containerd - enable systemd runc backend
      replace:
        path: /etc/containerd/config.toml
        regexp: "SystemdCgroup = false"
        replace: "SystemdCgroup = true"

    - name: containerd - restart and enable service
      service:
        name: containerd
        enabled: yes
        state: restarted

    #########
    ## K8s ##
    #########

    - name: k8s - create directory for persistent hostPath "volumes"
      file:
        path: /var/lib/k8s/volumes
        state: directory

    # ############
    # ## Reboot ##
    # ############

    - name: system - reboot (configuration)
      reboot:
