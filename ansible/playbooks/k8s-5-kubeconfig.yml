---
- hosts: k8s_controller
  become: true
  vars:
    local_user: fredrick

  tasks:
    - name: kubeadm - create kubeconfig for terraform
      command: kubeadm kubeconfig user --config /etc/kubernetes/kube-init-config.yaml --client-name terraform --validity-period 8760h
      register: kubeconfig_terraform
      when: "'k8s_controller' in group_names"

    - name: kubectl - check if clusterrolebinding exists
      shell: KUBECONFIG=/etc/kubernetes/admin.conf kubectl get clusterrolebinding terraform
      when: "'k8s_controller' in group_names"
      register: clusterrolebiding
      ignore_errors: true

    - name: kubectl - grant terraform user cluster-admin role
      shell: KUBECONFIG=/etc/kubernetes/admin.conf kubectl create clusterrolebinding terraform --clusterrole=cluster-admin --user=terraform
      when: "'k8s_controller' in group_names and clusterrolebiding is failed"

    - name: gcpsm - nuke existing kubectl secret(s)
      shell: |
        secret_versions=$(gcloud secrets versions list homelab-kubeconfig --filter enabled --format value\(name\))
        for version in $secret_versions
        do
          gcloud secrets versions destroy $version --secret=homelab-kubeconfig --quiet
        done
      delegate_to: localhost
      become_user: "{{ local_user }}"
      when: "'k8s_controller' in group_names"
      register: gcpsm_nuke_kubectl_output

    - name: gcpsm - set nuke fact
      set_fact:
        gcpsm_nuke_kubectl: "{{ gcpsm_nuke_kubectl_output.stderr }}" # blame gcloud, they output to stderr on success
      when: "'k8s_controller' in group_names"

    - name: gcpsm - debug message nuke result
      debug:
        msg: "{{ hostvars['k8s-controller-0']['gcpsm_nuke_kubectl'] }}"
      when: "'k8s_controller' in group_names"

    - name: gcpsm - upload kubectl content to new secret version
      shell: echo {{ kubeconfig_terraform.stdout | quote }} | gcloud secrets versions add --data-file=- homelab-kubeconfig
      delegate_to: localhost
      become_user: "{{ local_user }}"
      when: "'k8s_controller' in group_names"
      register: gcpsm_upload_kubectl_output

    - name: gcpsm - set upload result fact
      set_fact:
        gcpsm_upload_kubectl: "{{ gcpsm_upload_kubectl_output.stderr }}" # blame gcloud, they output to stderr on success
      when: "'k8s_controller' in group_names"

    - name: gcpsm - debug message upload result
      debug:
        msg: "{{ hostvars['k8s-controller-0']['gcpsm_upload_kubectl'] }}"
      when: "'k8s_controller' in group_names"
